//Copyright BrianCraig https://github.com/BrianCraig/Tilemap-Shadow-Caster

using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using UnityEngine.Tilemaps;

[DisallowMultipleComponent]
public class TilemapShadowCaster2D : MonoBehaviour
{
    [SerializeField] private bool m_SelfShadows = false;
    [SerializeField] private int m_ApplyToSortingLayers = -1;

    private uint colliderHash;
    private CompositeCollider2D compositeCollider;

    private void Start()
    {
        compositeCollider = GetComponent<CompositeCollider2D>();
        colliderHash = 0;
    }

    private void Update()
    {
        uint shapeHash = compositeCollider.GetShapeHash(); //Don't generate the shadows if the collider hasn't changed
        if (shapeHash == colliderHash)
        {
            return;
        }

        colliderHash = shapeHash;
        ReinitializeShapes();
    }

    private int[] getLayers()
    {
        int[] values = SortingLayer.layers.Select(l => l.id).ToArray();
        List<int> sortingLayers = new List<int>();
        int propCount = 0;
        for (int i = 0; i < values.Length; i++)
        {
            int layer = 1 << i;
            if ((m_ApplyToSortingLayers & layer) != 0)
            {
                sortingLayers.Add(values[propCount]);
                propCount++;
            }
        }
        int[] layerArray = sortingLayers.ToArray();
        return layerArray;
    }

    private void ReinitializeShapes()
    {
        RemoveCurrentShadows();

        for (int i = 0; i < compositeCollider.pathCount; i++)
        {
            List<Vector2> points = new List<Vector2>();
            compositeCollider.GetPath(i, points);

            GameObject go = new GameObject("AutogeneratedShadowPath", typeof(MeshRenderer));
            go.transform.parent = transform;
            PathShadow path = go.AddComponent<PathShadow>();
            path.useRendererSilhouette = false;
            path.selfShadows = m_SelfShadows;
            path.SetShape(points, getLayers());
        }
    }

    private void RemoveCurrentShadows()
    {
        new List<PathShadow>(GetComponentsInChildren<PathShadow>())
            .ConvertAll(comp => comp.transform.gameObject)
            .ForEach(gameObject =>
            {
                if (Application.isEditor)
                {
                    DestroyImmediate(gameObject);
                }
                else
                {
                    Destroy(gameObject);
                }
            });
    }

    public void OnDestroy()
    {
        RemoveCurrentShadows();
    }
}
